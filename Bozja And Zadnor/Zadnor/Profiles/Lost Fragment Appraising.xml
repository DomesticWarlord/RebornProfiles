<?xml version="1.0" encoding="utf-8"?>
<!--
  Profile: Lost Fragment Appraising
  Authors: DomesticWarlord86, Kayla
-->
<Profile>
  <Name>Lost Fragment Appraising</Name>
  <BehaviorDirectory></BehaviorDirectory>
  <Order>
	
	<If condition="HasAtLeast(30884,1) or HasAtLeast(30885,1) or HasAtLeast(30886,1) or HasAtLeast(30887,1) 
					or HasAtLeast(30888,1) or HasAtLeast(30889,1) or HasAtLeast(30890,1) or HasAtLeast(30891,1) 
					or HasAtLeast(30892,1) or HasAtLeast(30893,1) or HasAtLeast(30894,1) or HasAtLeast(30895,1) 
					or HasAtLeast(30896,1) or HasAtLeast(30897,1) or HasAtLeast(30898,1) or HasAtLeast(30899,1)
					or HasAtLeast(32162,1) or HasAtLeast(32163,1) or HasAtLeast(32164,1) or HasAtLeast(32165,1)
					or HasAtLeast(32831,1) or HasAtLeast(32832,1) or HasAtLeast(32833,1) or HasAtLeast(32834,1)">
		<Log Message="Have rank 14 or lower Fragments. Headed to appraiser..." />			
		<If Condition="IsOnMap(975)">
			<Log Message="We're in Zadnor, headed to Resistance Appraiser..." />
			<NoCombatMoveTo XYZ="668.0552,296.0667,688.4108" />
			<RunCode name="AppraiseFragments"/>		
		</If>	
		<If Condition="not IsOnMap(975)">
			<Log Message="We're not in Zadnor, headed to Gangos Resistance Appraiser..." />
			<If Condition="not IsOnMap(915)">	
				<While Condition="not IsOnMap(759)">
					<TeleportTo AetheryteId="127"/> <!-- The Doman Enclave -->
				</While>				
				<GetTo ZoneId="759" XYZ="126.2195, -4.178713, 97.66013"/>
				<UseTransport NpcId="1032884" InteractDistance="3.0" XYZ="127.2754, -4.178713, 98.68005"/>
			</If>
			<RunCode name="AppraiseFragments"/>	
		</If>
	</If>

	<If condition="HasAtLeast(33768,1) or HasAtLeast(33769,1) or HasAtLeast(33770,1) or HasAtLeast(33771,1) 
					or HasAtLeast(33772,1) or HasAtLeast(33773,1) or HasAtLeast(33774,1) or HasAtLeast(33775,1) 
					or HasAtLeast(33776,1) or HasAtLeast(33777,1) or HasAtLeast(33778,1) or HasAtLeast(33779,1)">
		<Log Message="Have rank 16 or higher Fragments. Headed to appraiser..." />			
		<If Condition="IsOnMap(975)">
			<Log Message="We're in Zadnor, headed to Resistance Appraiser..." />
			<NoCombatMoveTo XYZ="668.0552,296.0667,688.4108" />
			<RunCode name="AppraiseFragments1"/>	
		</If>	
		<If Condition="not IsOnMap(975)">
			<Log Message="We're not in Zadnor, headed to Gangos Resistance Appraiser..." />
			<If Condition="not IsOnMap(915)">	
				<While Condition="not IsOnMap(759)">
					<TeleportTo AetheryteId="127"/> <!-- The Doman Enclave -->
				</While>				
				<GetTo ZoneId="759" XYZ="126.2195, -4.178713, 97.66013"/>
				<UseTransport NpcId="1032884" InteractDistance="3.0" XYZ="127.2754, -4.178713, 98.68005"/>
			</If>
			<RunCode name="AppraiseFragments1"/>	
		</If>
	</If>	
	
  </Order>
	<CodeChunks>				
		<CodeChunk Name="AppraiseFragments">
            <![CDATA[
                Dictionary<uint, ulong> Slots = new Dictionary<uint, ulong>
                {
                  {30884 , 0},
                  {30885 , 1},
                  {30886 , 2},
                  {30887 , 3},
                  {30888 , 4},
                  {30889 , 5},
                  {30890 , 6},
                  {30891 , 7},
                  {30892 , 8},
                  {30893 , 9},
                  {30894 , 10},
                  {30895 , 11},
                  {30896 , 12},
                  {30897 , 13},
                  {30898 , 14},
                  {30899 , 15},
                  {32162 , 16},
                  {32163 , 17},
                  {32164 , 18},
                  {32165 , 19},
                  {32831 , 20},
                  {32832 , 21},
                  {32833 , 22},
                  {32834 , 23}
                };
                uint[] appraiserIds = { 1032389,1035606,1036715 };
                var npcId = GameObjectManager.GameObjects.Where(r => r.IsTargetable && appraiserIds.Contains(r.NpcId)).OrderBy(r => r.Distance()).FirstOrDefault();


                if (!npcId.IsWithinInteractRange)

                {
                    var _target = npcId.Location;
                    Navigator.PlayerMover.MoveTowards(_target);
                    while (_target.Distance2D(Core.Me.Location) >= 4)
                    {
                        Navigator.PlayerMover.MoveTowards(_target);
                        await Coroutine.Sleep(100);
                    }
                    Navigator.PlayerMover.MoveStop();
                }

                npcId.Interact();

                await Coroutine.Wait(10000, () => SelectString.IsOpen);
                
                if (!SelectString.IsOpen)
                {
                    npcId.Interact();
                        await Coroutine.Wait(10000, () => SelectString.IsOpen);
                }                
            
                await Buddy.Coroutines.Coroutine.Sleep(500);
				if (ff14bot.RemoteWindows.SelectString.IsOpen)
				{
					Logging.WriteDiagnostic("Choosing 'Appraise forgotten fragments'.");
					ff14bot.RemoteWindows.SelectString.ClickSlot(0);
				}                    
                                            
                await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("ItemInspectionList")!= null);
                await Buddy.Coroutines.Coroutine.Sleep(500);
                //Start
                if (RaptureAtkUnitManager.GetWindowByName("ItemInspectionList") != null)
                {
                    foreach (var slot in Slots.Keys)
                    {
                        if (InventoryManager.FilledSlots.Any(i => i.RawItemId == slot))
                        {
                            Logging.WriteDiagnostic(string.Format("Selecting Fragment: {0}", DataManager.GetItem(slot).CurrentLocaleName));
                            RaptureAtkUnitManager.GetWindowByName("ItemInspectionList").SendAction(2, 3, 0, 3, Slots[slot]);


                            await Coroutine.Wait(5000, () => SelectYesno.IsOpen);
                            await Buddy.Coroutines.Coroutine.Sleep(500);
                            if (ff14bot.RemoteWindows.SelectYesno.IsOpen)
                            {
                                Logging.WriteDiagnostic("Selecting Yes.");
                                ff14bot.RemoteWindows.SelectYesno.ClickYes();
                            }

                            await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("ItemInspectionResult") != null);
                            await Buddy.Coroutines.Coroutine.Sleep(500);
                            while (RaptureAtkUnitManager.GetWindowByName("ItemInspectionResult") != null)
                            {
                                if (InventoryManager.FilledSlots.Any(i => i.RawItemId == slot))
                                {
                                    Logging.WriteDiagnostic("Appraising next Fragment.");
                                    RaptureAtkUnitManager.GetWindowByName("ItemInspectionResult").SendAction(1, 3, 0);
                                    await Buddy.Coroutines.Coroutine.Sleep(1000);
                                }
                                else
                                {
                                    {
                                        Logging.WriteDiagnostic("Out of boxes. Closing");
                                        RaptureAtkUnitManager.GetWindowByName("ItemInspectionResult").SendAction(1, 3, 1);
                                        await Buddy.Coroutines.Coroutine.Sleep(500);
                                        await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("ItemInspectionList")!= null);
                                    }
                                }
                            }
                        }
                    }
                }

                if (RaptureAtkUnitManager.GetWindowByName("ItemInspectionList") != null)
                {
                    RaptureAtkUnitManager.GetWindowByName("ItemInspectionList").SendAction(1,3,0xFFFFFFFF);
                }                    
            ]]>            
        </CodeChunk>
		<CodeChunk Name="AppraiseFragments1">
            <![CDATA[
                Dictionary<uint, ulong> Slots = new Dictionary<uint, ulong>
                {
                    {33768 , 0},
                    {33769 , 1},
                    {33770 , 2},
                    {33771 , 3},
                    {33772 , 4},
                    {33773 , 5},
                    {33774 , 6},
                    {33775 , 7},
                    {33776 , 8},
                    {33777 , 9},
                    {33778 , 10},
                    {33779 , 11}

                };
                uint[] appraiserIds = { 1032389,1035606,1036715 };
                var npcId = GameObjectManager.GameObjects.Where(r => r.IsTargetable && appraiserIds.Contains(r.NpcId)).OrderBy(r => r.Distance()).FirstOrDefault();


                if (!npcId.IsWithinInteractRange)

                {
                    var _target = npcId.Location;
                    Navigator.PlayerMover.MoveTowards(_target);
                    while (_target.Distance2D(Core.Me.Location) >= 4)
                    {
                        Navigator.PlayerMover.MoveTowards(_target);
                        await Coroutine.Sleep(100);
                    }
                    Navigator.PlayerMover.MoveStop();
                }

                npcId.Interact();

                await Coroutine.Wait(10000, () => SelectString.IsOpen);
                
                if (!SelectString.IsOpen)
                {
                    npcId.Interact();
                        await Coroutine.Wait(10000, () => SelectString.IsOpen);
                }                
            
                await Buddy.Coroutines.Coroutine.Sleep(500);
                if (ff14bot.RemoteWindows.SelectString.IsOpen)
                {
                    Logging.WriteDiagnostic("Choosing 'Appraise forgotten fragments Rank 16+'.");
                    ff14bot.RemoteWindows.SelectString.ClickSlot(1);
                }                    
                                            
                await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("ItemInspectionList")!= null);
                await Buddy.Coroutines.Coroutine.Sleep(500);
                //Start
                if (RaptureAtkUnitManager.GetWindowByName("ItemInspectionList") != null)
                {
                    foreach (var slot in Slots.Keys)
                    {
                        if (InventoryManager.FilledSlots.Any(i => i.RawItemId == slot))
                        {
                            Logging.WriteDiagnostic(string.Format("Selecting Fragment: {0}", DataManager.GetItem(slot).CurrentLocaleName));
                            RaptureAtkUnitManager.GetWindowByName("ItemInspectionList").SendAction(2, 3, 0, 3, Slots[slot]);


                            await Coroutine.Wait(5000, () => SelectYesno.IsOpen);
                            await Buddy.Coroutines.Coroutine.Sleep(500);
                            if (ff14bot.RemoteWindows.SelectYesno.IsOpen)
                            {
                                Logging.WriteDiagnostic("Selecting Yes.");
                                ff14bot.RemoteWindows.SelectYesno.ClickYes();
                            }

                            await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("ItemInspectionResult") != null);
                            await Buddy.Coroutines.Coroutine.Sleep(500);
                            while (RaptureAtkUnitManager.GetWindowByName("ItemInspectionResult") != null)
                            {
                                if (InventoryManager.FilledSlots.Any(i => i.RawItemId == slot))
                                {
                                    Logging.WriteDiagnostic("Appraising next Fragment.");
                                    RaptureAtkUnitManager.GetWindowByName("ItemInspectionResult").SendAction(1, 3, 0);
                                    await Buddy.Coroutines.Coroutine.Sleep(1000);
                                }
                                else
                                {
                                    {
                                        Logging.WriteDiagnostic("Out of boxes. Closing");
                                        RaptureAtkUnitManager.GetWindowByName("ItemInspectionResult").SendAction(1, 3, 1);
                                        await Buddy.Coroutines.Coroutine.Sleep(500);
                                        await Coroutine.Wait(5000, () => RaptureAtkUnitManager.GetWindowByName("ItemInspectionList")!= null);
                                    }
                                }
                            }
                        }
                    }
                }

                if (RaptureAtkUnitManager.GetWindowByName("ItemInspectionList") != null)
                {
                    RaptureAtkUnitManager.GetWindowByName("ItemInspectionList").SendAction(1,3,0xFFFFFFFF);
                }                    
            ]]>            
        </CodeChunk>		
	</CodeChunks>    
</Profile>  